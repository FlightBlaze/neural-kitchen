import logging

import recipe_factory
import translation
import message_cls
import answering

from aiogram import Bot, Dispatcher, executor, types

TOKEN = '5483232182:AAE6RnbdIkqWCm-HpMMXzZkJ4T00q3d5hb4'
START_MESSAGE_PARAHRAPHS = [
    'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –ø–æ–≤–∞—Ä –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å.',
    'ü•ë –ù–∞–∑–æ–≤–∏ –ª—é–±–æ–µ, –ø—É—Å–∫–∞–π –¥–∞–∂–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –±–ª—é–¥–æ, –∞ —è –ø—Ä–∏–¥—É–º–∞—é —Ä–µ—Ü–µ–ø—Ç.',
    '‚ùì –¢–∞–∫–∂–µ —Ç—ã –º–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ –∫—É–ª–∏–Ω–∞—Ä–∏–∏.',
    'üé® –°–∫–æ—Ä–æ —è –Ω–∞—É—á—É—Å—å —Ä–∏—Å–æ–≤–∞—Ç—å –±–ª—é–¥–∞ –ø–æ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è–º –∏ –¥–∞–∂–µ —Å–º–æ–≥—É —Å–∞–º –ø—Ä–∏–¥—É–º–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏—è.',
    'ü§∑‚Äç‚ôÇÔ∏è –Ø –º–æ–≥—É –Ω–µ—á–∞–π–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–µ–ø–æ–ª–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç –∏–ª–∏ –¥–∞—Ç—å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω–æ —ç—Ç–æ –ø–æ—Ç–æ–º—É —á—Ç–æ —è –æ–±—É—á–∞–ª—Å—è –≤—Å–µ–≥–æ 3 —ç–ø–æ—Ö–∏ –Ω–∞ –Ω–µ–±–æ–ª—å—à–æ–π –≤—ã–±–æ—Ä–∫–µ.'
]
START_MESSAGE = '\n\n'.join(START_MESSAGE_PARAHRAPHS)  # Join parahraphs with one empty line inbetween

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):
    message.reply(START_MESSAGE)


@dp.message_handler()
async def on_msg(message: types.Message):
    """User message handling."""
    text = message.text
    
    # Check if message is question or a dish name
    if message_cls.isMessageQuestionCls.predict(text):
        responce = answering.answer_question(text)
        message.answer.reply_text(responce)
    else:
        message.answer.reply_text('üïì –ü—Ä–∏–¥—É–º—ã–≤–∞—é —Ä–µ—Ü–µ–ø—Ç...')
        text_en = translation.ru_en.translate(text.lower())[0].lower()
        recipe_en = recipe_factory.recipeFactory.generate_recipe(text_en)
        recipe = translation.translate_recipe_to_russian(recipe_en)
        responce = recipe.to_message()
        message.answer.reply_text(responce)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
